buildscript {
    ext {
        snippetsDir = file('build/generated-snippets')
        flywayVersion = '3.2.1'
        hibernateVersion = '5.3.7.Final'
    }

    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.20"
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id "io.spring.dependency-management" version "1.0.3.RELEASE"
}

apply plugin: 'idea'
apply plugin: 'java'

buildDir = './out'

if (buildStage()) {
    apply plugin: "com.gorylenko.gradle-git-properties"
    apply from: "${rootProject.projectDir}/gradle/checkstyle.gradle"
    apply from: "${rootProject.projectDir}/gradle/findbugs.gradle"
    apply from: "${rootProject.projectDir}/gradle/git-hooks.gradle"
    apply from: "${rootProject.projectDir}/gradle/build-version.gradle"
    apply from: "${rootProject.projectDir}/gradle/boot-info.gradle"
    apply from: "${rootProject.projectDir}/gradle/maven-publish.gradle"
}

group = 'cn.printf'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    querydsl.extendsFrom compileClasspath
}

tasks.withType(JavaCompile) { options.encoding = 'utf-8' }

repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    mavenCentral()
}

dependencies {
    // core
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    compileOnly "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"

    // web
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-hateoas'

    // Session
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile 'org.springframework.session:spring-session-data-redis'

    // database
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'mysql:mysql-connector-java'

    compile 'org.flywaydb:flyway-core'

    // model mapper
    compile group: 'org.modelmapper', name: 'modelmapper', version: '1.1.1'

    // test
    testCompile("org.springframework.boot:spring-boot-starter-test")

    runtime('org.springframework.boot:spring-boot-devtools')
}

def buildStage() {
    String isBuildStage = System.getProperty("buildStage")
    print "property isBuildStage=${isBuildStage}"
    def b = isBuildStage == null || Boolean.valueOf(isBuildStage)
    print "final isBuildStage=${b}"
    return b
}
