buildscript {
    ext {
        snippetsDir = file('build/generated-snippets')
        flywayVersion = '3.2.1'
        hibernateVersion = '5.3.7.Final'
        springBootVersion = '2.1.4.RELEASE'
    }

    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.20"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" as Object)
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    buildDir = './out'

    group = 'cn.printf.springbootboilerplate'
    version = '1.0.0'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) { options.encoding = 'utf-8' }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"
    }

    if (buildStage()) {
        apply plugin: "com.gorylenko.gradle-git-properties"
        apply from: "${rootProject.projectDir}/gradle/checkstyle.gradle"
        apply from: "${rootProject.projectDir}/gradle/findbugs.gradle"
        apply from: "${rootProject.projectDir}/gradle/git-hooks.gradle"
        apply from: "${rootProject.projectDir}/gradle/build-version.gradle"
        apply from: "${rootProject.projectDir}/gradle/boot-info.gradle"
        apply from: "${rootProject.projectDir}/gradle/maven-publish.gradle"
    }
}

def buildStage() {
    String isBuildStage = System.getProperty("buildStage")
    print "property isBuildStage=${isBuildStage}"
    def b = isBuildStage == null || Boolean.valueOf(isBuildStage)
    print "final isBuildStage=${b}"
    return b
}
